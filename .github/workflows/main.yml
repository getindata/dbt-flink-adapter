# **what?**
# Runs code quality checks, unit tests, and verifies python build on
# all code commited to the repository. This workflow should not
# require any secrets since it runs for PRs from forked repos.
# By default, secrets are not passed to workflows running from
# a forked repo.

# **why?**
# Ensure code for dbt meets a certain quality standard.

# **when?**
# This will run for all PRs, when code is pushed to a release
# branch, and when manually triggered.

name: Tests and Code Checks

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  code-quality:
    name: code-quality

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install python dependencies
        run: |
          python -m pip install poetry
          poetry install -v
          poetry run pre-commit --version
          poetry run pyright --version
          poetry run dbt --version

      - name: Run pre-commit hooks
        run: |
          poetry run pyright --createstub "agate"
          poetry run pre-commit run --all-files

  build:
    name: build packages

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          python -m pip install poetry
          python -m pip install twine
          poetry install -v

      - name: Build distributions
        run: |
          poetry build

      - name: Check distribution descriptions
        run: |
          poetry run twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
  test-build:
    name: verify packages / python ${{ matrix.python-version }} / ${{ matrix.os }}

    needs:
      - build
      - code-quality

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install poetry

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install wheel distributions
        run: |
          find ./dist/*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/
      - name: Check wheel distributions
        run: |
          dbt --version
      - name: Install source distributions
        run: |
          find ./dist/*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/
  publish:
    name: Publish python package to PyPi repository
    needs: test-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish distribution to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true  # trace if the upload fails
